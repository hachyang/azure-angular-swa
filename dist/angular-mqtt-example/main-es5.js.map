{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<h1>Sensor Setup: {{deviceName}}</h1>\\r\\n\\r\\n<table>\\r\\n    <tr>\\r\\n        <td>ioT Device: </td>\\r\\n        <td>\\r\\n\\r\\n                <input\\r\\n                id=\\\"topicname\\\"\\r\\n                [(ngModel)]=\\\"inputs.topicname\\\"\\r\\n                class=\\\"input\\\"\\r\\n                placeholder=\\\"Topic Name\\\"\\r\\n                (focus)=\\\"onInputFocus($event)\\\"\\r\\n                (change)=\\\"onInputChange($event)\\\"\\r\\n                (blur)=\\\"onInputBlur($event)\\\"\\r\\n              />\\r\\n\\r\\n        </td>\\r\\n        <td><button mat-raised-button color=\\\"primary\\\" type=\\\"button\\\" (click)=\\\"subscribeNewTopic()\\\">Subscribe Topic</button></td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Location: </td>\\r\\n        <td>\\r\\n\\r\\n                <input\\r\\n                id=\\\"msg\\\"\\r\\n                [(ngModel)]=\\\"inputs.msg\\\"\\r\\n                class=\\\"input\\\"\\r\\n                placeholder=\\\"Msg Sent\\\"\\r\\n                (focus)=\\\"onInputFocus($event)\\\"\\r\\n                (change)=\\\"onInputChange($event)\\\"\\r\\n                (blur)=\\\"onInputBlur($event)\\\"\\r\\n              />\\r\\n\\r\\n        </td>\\r\\n        <td><button mat-raised-button color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"sendmsg()\\\">Send</button></td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td>Device ID: </td>\\r\\n        <td>\\r\\n\\r\\n                <input\\r\\n                id=\\\"units\\\"\\r\\n                [(ngModel)]=\\\"inputs.units\\\"\\r\\n                class=\\\"input\\\"\\r\\n                placeholder=\\\"Change Units\\\"\\r\\n                (focus)=\\\"onInputFocus($event)\\\"\\r\\n                (change)=\\\"onInputChange($event)\\\"\\r\\n                (blur)=\\\"onInputBlur($event)\\\"\\r\\n              />\\r\\n\\r\\n        </td>\\r\\n        <td><button mat-fab color=\\\"accent\\\" type=\\\"button\\\" (click)=\\\"changeUnits()\\\">Change</button></td>\\r\\n    </tr>\\r\\n    <tr>\\r\\n        <td></td>\\r\\n        <td>&nbsp;&nbsp;<button mat-raised-button color=\\\"warn\\\" type=\\\"button\\\" (click)=\\\"clear()\\\">Clear Log</button></td>\\r\\n        <td></td>\\r\\n    </tr>\\r\\n</table>\\r\\n<div style=\\\"text-align:center\\\" [ngClass]=\\\"!show ? 'hide-keyboard' : ''\\\">\\r\\n<!--The content below is only a placeholder and can be replaced.-->\\r\\n<div class=\\\"simple-keyboard\\\"></div>\\r\\n</div>\\r\\n<mat-form-field appearance=\\\"fill\\\">\\r\\n  <mat-label>Choose a date</mat-label>\\r\\n<!-- #docregion toggle -->\\r\\n  <input matInput [matDatepicker]=\\\"picker\\\">\\r\\n  <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n  <mat-datepicker #picker></mat-datepicker>\\r\\n<!-- #enddocregion toggle -->\\r\\n</mat-form-field>\\r\\n<div><a href=\\\"http://192.168.0.43:1880/ui\\\"><h1>Go Home</h1></a>\\r\\n</div>\\r\\n           <div>\\r\\n\\r\\n                <div className=\\\"d1\\\">\\r\\n                    <div>Last msg Received:</div>\\r\\n                    <div> {{ state.msgRecvd | json }} </div>\\r\\n                    <div>Number of Msgs Received: {{ state.msgsReceived  }} </div>\\r\\n                </div>\\r\\n\\r\\n                <div className=\\\"d1\\\">\\r\\n                    <div>last Ctl Msg Received:</div>\\r\\n                    <div> {{state.msgCtrl | json }} </div>\\r\\n                    <div>Number of Control Msgs Received: {{ state.msgsControl }}</div>\\r\\n                </div>\\r\\n\\r\\n                <div className=\\\"d1\\\">\\r\\n                    <div>last Msg Sent</div>\\r\\n                    <div> {{ state.msgSent | json }} </div>\\r\\n                    <div>Number of msgs Sent: {{ state.msgsSent }}</div>\\r\\n                </div>\\r\\n\\r\\n                <div className=\\\"d1\\\">\\r\\n                    <div>Socket Connected?: {{ state.socketConnectedState }}</div>\\r\\n                    <div>uibuilderfe Version: {{ state.feVersion }}</div>\\r\\n                    <div>Server Time Offset from browser: {{ state.serverTimeOffset }}</div>\\r\\n                </div>\\r\\n\\r\\n</div>\\r\\n\\r\\n<br /><br />\\r\\n<div #msglog>\\r\\n</div>\\r\\n\"","module.exports = \"ul {\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  input {\\r\\n    width: 100%;\\r\\n    height: 50px;\\r\\n    padding: 20px;\\r\\n    font-size: 20px;\\r\\n    border: none;\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n  \\r\\n  .simple-keyboard {\\r\\n    max-width: 850px;\\r\\n  }\\r\\n  \\r\\n  .hide-keyboard {\\r\\n    overflow: hidden;\\r\\n    height: 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsWUFBWTtJQUNaLGFBQWE7SUFDYixlQUFlO0lBQ2YsWUFBWTtJQUNaLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLGdCQUFnQjtFQUNsQjs7RUFDQTtJQUNFLGdCQUFnQjtJQUNoQixTQUFTO0VBQ1giLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInVsIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXQge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDUwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB9XHJcbiAgXHJcbiAgLnNpbXBsZS1rZXlib2FyZCB7XHJcbiAgICBtYXgtd2lkdGg6IDg1MHB4O1xyXG4gIH1cclxuICAuaGlkZS1rZXlib2FyZCB7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgaGVpZ2h0OiAwO1xyXG4gIH0iXX0= */\"","import { HttpClient } from '@angular/common/http';\r\nimport { Component, ViewEncapsulation, OnInit,AfterViewInit,ViewChild, ElementRef, OnDestroy } from '@angular/core';\r\n//import { Paho } from 'ng2-mqtt/mqttws31';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { IMqttMessage, MqttService } from 'ngx-mqtt';\r\nimport uibuilder from 'node-red-contrib-uibuilder/front-end/src/uibuilderfe';\r\nimport Keyboard from \"simple-keyboard\";\r\n//import { Client } from 'azure-iothub';\r\n//import { Message } from 'azure-iot-common';\r\n//const Client = require('azure-iothub').Client;\r\n//const Message = require('azure-iot-common').Message;\r\n//const connectionString = 'HostName=hachsc.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey=qM/GKO2p2jmuKfTz8FyT+quDmkJ4BnT3z5PvDN27oxk=';\r\n//const targetDevice = 'cl17sc';\r\n//const serviceClient = Client.fromConnectionString(connectionString);\r\n@Component({\r\n  selector: 'app-root',\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './app.component.html',\r\n  styleUrls: [\"../../node_modules/simple-keyboard/build/css/index.css\",\r\n  './app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit, AfterViewInit,OnDestroy {\r\n  // private mqttClient: Paho.MQTT.Client;\r\n  private subscription: Subscription;\r\n  private message: String;\r\n  //topicname: any;\r\n  //msg: any;\r\n  isConnected: boolean = false;\r\n  show: boolean = false;\r\n  //private layout: any = 'alphanumeric';\r\n  controlTopic:string;\r\n  unitsGetTopic: string;\r\n  unitsSetTopic: string;\r\n  deviceName:string = \"CL17sc\";\r\n  inputName = \"topicname\";\r\n  inputs = {\r\n    topicname: \"cl17sc\",\r\n    msg: \"hello!\",\r\n    units: this.deviceName\r\n  };\r\n  keyboard: Keyboard;\r\n  state = {\r\n                // Example of retrieving data from uibuilder\r\n                feVersion: uibuilder.get('version'),\r\n    \r\n                socketConnectedState: false,\r\n                serverTimeOffset: '[unknown]',\r\n    \r\n                msgRecvd: {},\r\n                msgsReceived: 0,\r\n                msgCtrl: '[Nothing]',\r\n                msgsControl: 0,\r\n    \r\n                msgSent: '[Nothing]',\r\n                msgsSent: 0,\r\n                msgCtrlSent: '[Nothing]',\r\n                msgsCtrlSent: 0,\r\n            };\r\n \r\n\r\n //connectionString:string = 'HostName=hachsc.azure-devices.net;SharedAccessKeyName=service;SharedAccessKey=wuEwDqFg/2jywdNB8WVJ078Eagt9KErhqSQLmG405kw=';\r\n //serviceClient = Client.fromConnectionString(this.connectionString);\r\n//serviceClient:any;\r\n @ViewChild('msglog', { static: true }) msglog: ElementRef;\r\n  constructor(private _mqttService: MqttService, private http: HttpClient) {\r\n         /** **REQUIRED** Start uibuilder comms with Node-RED @since v2.0.0-dev3\r\n         * Pass the namespace and ioPath variables if hosting page is not in the instance root folder\r\n         * e.g. If you get continual `uibuilderfe:ioSetup: SOCKET CONNECT ERROR` error messages.\r\n         * e.g. uibuilder.start('/nr/uib', '/nr/uibuilder/vendor/socket.io') // change to use your paths/names\r\n         */\r\n        uibuilder.start();\r\n\r\n\r\n        /** You can use the following to help trace how messages flow back and forth.\r\n         * You can then amend this processing to suite your requirements.\r\n         */\r\n\r\n        //#region ---- Trace Received Messages ---- //\r\n        // If msg changes - msg is updated when a standard msg is received from Node-RED over Socket.IO\r\n        // newVal relates to the attribute being listened to.\r\n        uibuilder.onChange('msg', (newVal) => {\r\n\r\n            this.state.msgRecvd = newVal;\r\n            this.subscribeDefaultTopic();\r\n            console.info('[uibuilder.onChange] msg received from Node-RED server:', newVal);\r\n        });\r\n\r\n        // As we receive new messages, we get an updated count as well\r\n        uibuilder.onChange('msgsReceived', (newVal) => {\r\n            console.info('[uibuilder.onChange] Updated count of received msgs:', newVal);\r\n\r\n            this.state.msgsReceived = newVal;\r\n            \r\n        });\r\n\r\n        // If we receive a control message from Node-RED, we can get the new data here - we pass it to a Vue variable\r\n        uibuilder.onChange('ctrlMsg', (newVal) => {\r\n            console.info('[uibuilder.onChange:ctrlMsg] CONTROL msg received from Node-RED server:', newVal);\r\n\r\n            this.state.msgCtrl = newVal;\r\n        });\r\n        // Updated count of control messages received\r\n        uibuilder.onChange('msgsCtrl', (newVal) => {\r\n            console.info('[uibuilder.onChange:msgsCtrl] Updated count of received CONTROL msgs:', newVal);\r\n\r\n            this.state.msgsControl = newVal;\r\n        });\r\n        //#endregion ---- End of Trace Received Messages ---- //\r\n\r\n        //#region ---- Trace Sent Messages ---- //\r\n        // You probably only need these to help you understand the order of processing //\r\n        // If a message is sent back to Node-RED, we can grab a copy here if we want to\r\n        uibuilder.onChange('sentMsg', (newVal) => {\r\n            console.info('[uibuilder.onChange:sentMsg] msg sent to Node-RED server:', newVal);\r\n\r\n            this.state.msgSent = newVal;\r\n        });\r\n        // Updated count of sent messages\r\n        uibuilder.onChange('msgsSent', (newVal) => {\r\n            console.info('[uibuilder.onChange:msgsSent] Updated count of msgs sent:', newVal);\r\n\r\n            this.state.msgsSent= newVal;\r\n        });\r\n\r\n        // If we send a control message to Node-RED, we can get a copy of it here\r\n        uibuilder.onChange('sentCtrlMsg', (newVal) => {\r\n            console.info('[uibuilder.onChange:sentCtrlMsg] Control message sent to Node-RED server:', newVal);\r\n\r\n            this.state.msgCtrlSent = newVal;\r\n        });\r\n        // And we can get an updated count\r\n        uibuilder.onChange('msgsSentCtrl', (newVal) => {\r\n            console.info('[uibuilder.onChange:msgsSentCtrl] Updated count of CONTROL msgs sent:', newVal);\r\n\r\n            this.state.msgsCtrlSent = newVal;\r\n        });\r\n        //#endregion ---- End of Trace Sent Messages ---- //\r\n\r\n        // If Socket.IO connects/disconnects, we get true/false here\r\n        uibuilder.onChange('ioConnected', (newVal) => {\r\n            console.info('[uibuilder.onChange:ioConnected] Socket.IO Connection Status Changed to:', newVal)\r\n\r\n            this.state.socketConnectedState = newVal;\r\n        });\r\n        // If Server Time Offset changes\r\n        uibuilder.onChange('serverTimeOffset', (newVal) => {\r\n            console.info('[uibuilder.onChange:serverTimeOffset] Offset of time between the browser and the server has changed to:', newVal)\r\n\r\n            this.state.serverTimeOffset =newVal;\r\n        });\r\n\r\n        //Manually send a message back to Node-RED after 2 seconds\r\n        window.setTimeout(function () {\r\n            console.info('Sending a message back to Node-RED-after2sdelay');\r\n          \r\n            uibuilder.send({'topic': 'uibuilderfe', 'payload': 'I am a message sent from the uibuilder sensor front end'})\r\n        }, 2000);  \r\n       // this.serviceClient = Client.fromConnectionString(this.connectionString);\r\n }\r\n\r\n  ngOnInit(): void {\r\n    // Broker connection on startup\r\n    // this.connectToMQTTBroker();\r\n    //this.serviceClient = Client.fromConnectionString(this.connectionString);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    /*\r\n    this.keyboard = new Keyboard({\r\n      onChange: input => this.onChange(input),\r\n      onKeyPress: button => this.onKeyPress(button)\r\n    });\r\n    */\r\n    //this.subscribeDefaultTopic();\r\n    this.keyboard = new Keyboard({\r\n     //debug: true,\r\n      inputName: this.inputName,\r\n      onChange: (input) => this.onChange(input),\r\n      onKeyPress: (button) => this.onKeyPress(button),\r\n      preventMouseDownDefault: true // If you want to keep focus on input\r\n    });\r\n\r\n    /**\r\n     * Since we have default values for our inputs,\r\n     * we must sync them with simple-keyboard\r\n     */\r\n    this.keyboard.replaceInput(this.inputs);\r\n  }\r\n  onInputFocus = (event: any) => {\r\n    this.inputName = event.target.id;\r\n    this.show = true;\r\n    /*\r\n    this.keyboard = new Keyboard({\r\n      //debug: true,\r\n       inputName: this.inputName,\r\n       onChange: (input) => this.onChange(input),\r\n       onKeyPress: (button) => this.onKeyPress(button),\r\n      //preventMouseDownDefault: true // If you want to keep focus on input\r\n     });\r\n     this.keyboard.replaceInput(this.inputs);\r\n     */\r\n    console.log(\"Focused input\", this.inputName);\r\n\r\n    this.keyboard.setOptions({\r\n      inputName: event.target.id\r\n    });\r\n  };\r\n  onInputBlur = (event: any) => {\r\n    this.show = false;\r\n  };\r\n  setInputCaretPosition = (elem: any, pos: number) => {\r\n    if (elem.setSelectionRange) {\r\n      elem.focus();\r\n      elem.setSelectionRange(pos, pos);\r\n    }\r\n  };\r\n\r\n  onInputChange = (event: any) => {\r\n    this.keyboard.setInput(event.target.value, event.target.id);\r\n  };\r\n\r\n  onChange = (input: string) => {\r\n    this.inputs[this.inputName] = input;\r\n    console.log(\"Input changed\", input);\r\n\r\n    /**\r\n     * Synchronizing input caret position\r\n     * This part is optional and only relevant if using the option \"preventMouseDownDefault: true\"\r\n     */\r\n    let caretPosition = this.keyboard.caretPosition;\r\n\r\n    if (caretPosition !== null)\r\n      this.setInputCaretPosition(\r\n        document.querySelector(`#${this.inputName}`),\r\n        caretPosition\r\n      );\r\n\r\n    console.log(\"caretPosition\", caretPosition);\r\n  };\r\n\r\n  onKeyPress = (button: string) => {\r\n    console.log(\"Button pressed\", button);\r\n\r\n    /**\r\n     * If you want to handle the shift and caps lock buttons\r\n     */\r\n    if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\r\n  };\r\n\r\n  handleShift = () => {\r\n    let currentLayout = this.keyboard.options.layoutName;\r\n    let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\r\n\r\n    this.keyboard.setOptions({\r\n      layoutName: shiftToggle\r\n    });\r\n  };\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n  /*\r\n  onInputFocus() {\r\n    this.keyboard = new Keyboard({\r\n          onChange: input => this.onChange(input),\r\n          onKeyPress: button => this.onKeyPress(button)\r\n        });\r\n    }\r\n\r\n\r\n  onChange = (input: string) => {\r\n    this.msg = input;\r\n    console.log(\"Input changed\", input);\r\n  };\r\n\r\n  onKeyPress = (button: string) => {\r\n    console.log(\"Button pressed\", button);\r\n\r\n  \r\n    if (button === \"{shift}\" || button === \"{lock}\") this.handleShift();\r\n  };\r\n\r\n  onInputChange = (event: any) => {\r\n    this.keyboard.setInput(event.target.value);\r\n  };\r\n\r\n  handleShift = () => {\r\n    let currentLayout = this.keyboard.options.layoutName;\r\n    let shiftToggle = currentLayout === \"default\" ? \"shift\" : \"default\";\r\n\r\n    this.keyboard.setOptions({\r\n      layoutName: shiftToggle\r\n    });\r\n  };\r\n  */\r\n  subscribeDefaultTopic() {\r\n    interface UiBuilderMsg {\r\n      topic: String,\r\n      payload: String\r\n      //_socketId: String, \r\n      //_msgid: String \r\n    }\r\n\r\n    //this.state.msgRecvd = {topic: \"hello\", payload:\"baba\",_socketId:\"kkkop\",_msgid: \"977yhh\"};\r\n    const msgData:UiBuilderMsg = JSON.parse(JSON.stringify(this.state.msgRecvd));\r\n    this.deviceName = msgData.payload.toString();\r\n    //const msgData:UiBuilderMsg = JSON.parse(uibuilder.get('msg'));\r\n    this.inputs.topicname = '/devices/' + msgData.payload.toString() + '/reading';\r\n    this.subscribeNewTopic();\r\n    this.inputs.topicname = '/devices/' + msgData.payload.toString() + '/units';\r\n    this.unitsGetTopic = this.inputs.topicname;\r\n    this.unitsSetTopic = '/devices/' + msgData.payload.toString() + '/set_units';\r\n    this.subscribeNewTopic();\r\n    this.inputs.topicname = '/devices/' + msgData.payload.toString() +  '/control';\r\n    this.controlTopic = this.inputs.topicname;\r\n    //this.subscribeNewTopic(); \r\n    this._mqttService.unsafePublish(this.inputs.topicname, \"GetUnits\", { qos: 1, retain: true })\r\n\r\n  }\r\n\r\n  subscribeNewTopic(): void {\r\n    console.log('inside subscribe new topic')\r\n    this.subscription = this._mqttService.observe(this.inputs.topicname).subscribe((message: IMqttMessage) => {\r\n      //this.msg = message;\r\n      console.log('msg: ', message)\r\n      if (message.topic == this.unitsGetTopic) {\r\n          this.inputs.units = message.payload.toString();\r\n      }\r\n      else {\r\n          this.logMsg('Message: ' + message.payload.toString() + '<br> for topic: ' + message.topic);\r\n      }\r\n    });\r\n    this.logMsg('subscribed to topic: ' + this.inputs.topicname)\r\n  }\r\n\r\n  sendmsg(): void {\r\n    // use unsafe publish for non-ssl websockets\r\n    //this._mqttService.unsafePublish(this.inputs.topicname, this.inputs.msg, { qos: 1, retain: true });\r\n    const apiUrl = '/api/HttpTrigger?Module=' + this.inputs.topicname + '&Device=' + this.inputs.units + '&Location=' + this.inputs.msg;\r\n    \r\n    this.logMsg(apiUrl);\r\n    this.http.get(apiUrl).subscribe((resp: any) =>  this.logMsg(resp.text));\r\n    this.inputs.msg = ''\r\n  }\r\n  changeUnits(): void {\r\n    this.deviceName = this.inputs.units;\r\n    // use unsafe publish for non-ssl websockets\r\n    this._mqttService.unsafePublish(this.unitsSetTopic, this.inputs.units, { qos: 1, retain: true })\r\n  }\r\n  // onConnected(): void {\r\n  //   this.logMsg('Connected to broker!');\r\n  //   this.isConnected = true;\r\n  // }\r\n\r\n  logMsg(message): void {\r\n    this.msglog.nativeElement.innerHTML = '<br><hr>' + message;\r\n  }\r\n\r\n  clear(): void {\r\n    this.msglog.nativeElement.innerHTML = '';\r\n  }\r\n/*\r\n\r\n printResultFor(op): any {\r\n  return (err, res) => {\r\n    if (err) console.log(op + ' error: ' + err.toString());\r\n    if (res) console.log(op + ' status: ' + res.constructor.name);\r\n  };\r\n}\r\nreceiveFeedback(err, receiver):void {\r\n  receiver.on('message',  (msg) => {\r\n    console.log('Feedback message:')\r\n    console.log(msg.getData().toString('utf-8'));\r\n  });\r\n}\r\n\r\nSendC2DMessage(): void {\r\n    this.serviceClient.open( (err) => {\r\n      if (err) {\r\n        console.error('Could not connect: ' + err.message);\r\n      } \r\n      else {\r\n        console.log('Service client connected');\r\n        this.serviceClient.getFeedbackReceiver(this.receiveFeedback);\r\n        var payload = JSON.stringify({\r\n          Device: this.inputs.units,\r\n          Location: this.inputs.msg,\r\n        });\r\n        var message = new Message(payload);\r\n        message.ack = 'full';\r\n        message.messageId = \"My Message ID\";\r\n        console.log('Sending message: ' + message.getData());\r\n        this.serviceClient.send(this.inputs.units.toLowerCase(), message, this.printResultFor('send'));\r\n      }\r\n    });\r\n\r\n  }\r\n  */\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { AppComponent } from './app.component';\r\nimport { IMqttMessage, MqttModule, IMqttServiceOptions } from \"ngx-mqtt\";\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n//import { MatKeyboardModule } from 'angular-onscreen-material-keyboard';\r\n//import { NgxVirtualKeyboardModule }  from 'ngx-virtual-keyboard';\r\n//import { IKeyboardLayouts, keyboardLayouts, MAT_KEYBOARD_LAYOUTS, MatKeyboardModule } from '@ngx-material-keyboard/core';\r\nexport const MQTT_SERVICE_OPTIONS: IMqttServiceOptions = {\r\n  hostname: '192.168.0.43',\r\n  port: 9001,\r\n  path: '/mqtt'\r\n}\r\n/*\r\nconst customLyouts: IKeyboardLayouts = {\r\n  ...keyboardLayouts,\r\n  'Custom Layout你的布局': {\r\n    'name': 'Awesome layout',\r\n    'keys': [\r\n      [\r\n        ['1', '!'],\r\n        ['2', '@'],\r\n        ['3', '#'],\r\n        ['4', '$']\r\n      ]\r\n    ],\r\n    'lang': ['Chinese中文']\r\n  }\r\n};\r\n*/\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    //NgxVirtualKeyboardModule,\r\n        // Material modules  \r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatNativeDateModule,\r\n    //MatRippleModule,\r\n    MatDatepickerModule, \r\n    //MatKeyboardModule,\r\n    MqttModule.forRoot(MQTT_SERVICE_OPTIONS),\r\n    BrowserAnimationsModule\r\n  ],\r\n providers: [],\r\n //   { provide: MAT_KEYBOARD_LAYOUTS, useValue: customLyouts }\r\n //],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}